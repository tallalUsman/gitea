{"version":3,"file":"css/code-frequency-graph.xxxxxxxx.css","mappings":";;;;AAwKA;EACE,aAAa;AACf","sources":["webpack:///./web_src/js/components/RepoCodeFrequency.vue"],"sourcesContent":["<script>\nimport {SvgIcon} from '../svg.js';\nimport {\n  Chart,\n  Legend,\n  LinearScale,\n  TimeScale,\n  PointElement,\n  LineElement,\n  Filler,\n} from 'chart.js';\nimport {GET} from '../modules/fetch.js';\nimport {Line as ChartLine} from 'vue-chartjs';\nimport {\n  startDaysBetween,\n  firstStartDateAfterDate,\n  fillEmptyStartDaysWithZeroes,\n} from '../utils/time.js';\nimport {chartJsColors} from '../utils/color.js';\nimport {sleep} from '../utils.js';\nimport 'chartjs-adapter-dayjs-4/dist/chartjs-adapter-dayjs-4.esm';\n\nconst {pageData} = window.config;\n\nChart.defaults.color = chartJsColors.text;\nChart.defaults.borderColor = chartJsColors.border;\n\nChart.register(\n  TimeScale,\n  LinearScale,\n  Legend,\n  PointElement,\n  LineElement,\n  Filler,\n);\n\nexport default {\n  components: {ChartLine, SvgIcon},\n  props: {\n    locale: {\n      type: Object,\n      required: true,\n    },\n  },\n  data: () => ({\n    isLoading: false,\n    errorText: '',\n    repoLink: pageData.repoLink || [],\n    data: [],\n  }),\n  mounted() {\n    this.fetchGraphData();\n  },\n  methods: {\n    async fetchGraphData() {\n      this.isLoading = true;\n      try {\n        let response;\n        do {\n          response = await GET(`${this.repoLink}/activity/code-frequency/data`);\n          if (response.status === 202) {\n            await sleep(1000); // wait for 1 second before retrying\n          }\n        } while (response.status === 202);\n        if (response.ok) {\n          this.data = await response.json();\n          const weekValues = Object.values(this.data);\n          const start = weekValues[0].week;\n          const end = firstStartDateAfterDate(new Date());\n          const startDays = startDaysBetween(new Date(start), new Date(end));\n          this.data = fillEmptyStartDaysWithZeroes(startDays, this.data);\n          this.errorText = '';\n        } else {\n          this.errorText = response.statusText;\n        }\n      } catch (err) {\n        this.errorText = err.message;\n      } finally {\n        this.isLoading = false;\n      }\n    },\n\n    toGraphData(data) {\n      return {\n        datasets: [\n          {\n            data: data.map((i) => ({x: i.week, y: i.additions})),\n            pointRadius: 0,\n            pointHitRadius: 0,\n            fill: true,\n            label: 'Additions',\n            backgroundColor: chartJsColors['additions'],\n            borderWidth: 0,\n            tension: 0.3,\n          },\n          {\n            data: data.map((i) => ({x: i.week, y: -i.deletions})),\n            pointRadius: 0,\n            pointHitRadius: 0,\n            fill: true,\n            label: 'Deletions',\n            backgroundColor: chartJsColors['deletions'],\n            borderWidth: 0,\n            tension: 0.3,\n          },\n        ],\n      };\n    },\n\n    getOptions() {\n      return {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: true,\n        plugins: {\n          legend: {\n            display: true,\n          },\n        },\n        scales: {\n          x: {\n            type: 'time',\n            grid: {\n              display: false,\n            },\n            time: {\n              minUnit: 'month',\n            },\n            ticks: {\n              maxRotation: 0,\n              maxTicksLimit: 12,\n            },\n          },\n          y: {\n            ticks: {\n              maxTicksLimit: 6,\n            },\n          },\n        },\n      };\n    },\n  },\n};\n</script>\n<template>\n  <div>\n    <div class=\"ui header tw-flex tw-items-center tw-justify-between\">\n      {{ isLoading ? locale.loadingTitle : errorText ? locale.loadingTitleFailed: `Code frequency over the history of ${repoLink.slice(1)}` }}\n    </div>\n    <div class=\"tw-flex ui segment main-graph\">\n      <div v-if=\"isLoading || errorText !== ''\" class=\"gt-tc tw-m-auto\">\n        <div v-if=\"isLoading\">\n          <SvgIcon name=\"octicon-sync\" class=\"tw-mr-2 job-status-rotate\"/>\n          {{ locale.loadingInfo }}\n        </div>\n        <div v-else class=\"text red\">\n          <SvgIcon name=\"octicon-x-circle-fill\"/>\n          {{ errorText }}\n        </div>\n      </div>\n      <ChartLine\n        v-memo=\"data\" v-if=\"data.length !== 0\"\n        :data=\"toGraphData(data)\" :options=\"getOptions()\"\n      />\n    </div>\n  </div>\n</template>\n<style scoped>\n.main-graph {\n  height: 440px;\n}\n</style>\n"],"names":[],"sourceRoot":""}