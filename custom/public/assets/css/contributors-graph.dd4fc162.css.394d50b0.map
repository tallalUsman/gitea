{"version":3,"file":"css/contributors-graph.xxxxxxxx.css","mappings":";;;;AAuZA;EACE,aAAa;EACb,gBAAgB;AAClB;AAEA;EACE,aAAa;EACb,qCAAqC;EACrC,SAAS;AACX;AAEA;EACE,YAAY;AACd;AAEA;AACE;IACE,qCAAqC;AACvC;AACF;AAEA;EACE,gBAAgB;AAClB","sources":["webpack:///./web_src/js/components/RepoContributors.vue"],"sourcesContent":["<script>\nimport {SvgIcon} from '../svg.js';\nimport {\n  Chart,\n  Title,\n  BarElement,\n  LinearScale,\n  TimeScale,\n  PointElement,\n  LineElement,\n  Filler,\n} from 'chart.js';\nimport {GET} from '../modules/fetch.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport {Line as ChartLine} from 'vue-chartjs';\nimport {\n  startDaysBetween,\n  firstStartDateAfterDate,\n  fillEmptyStartDaysWithZeroes,\n} from '../utils/time.js';\nimport {chartJsColors} from '../utils/color.js';\nimport {sleep} from '../utils.js';\nimport 'chartjs-adapter-dayjs-4/dist/chartjs-adapter-dayjs-4.esm';\nimport $ from 'jquery';\n\nconst {pageData} = window.config;\n\nconst customEventListener = {\n  id: 'customEventListener',\n  afterEvent: (chart, args, opts) => {\n    // event will be replayed from chart.update when reset zoom,\n    // so we need to check whether args.replay is true to avoid call loops\n    if (args.event.type === 'dblclick' && opts.chartType === 'main' && !args.replay) {\n      chart.resetZoom();\n      opts.instance.updateOtherCharts(args.event, true);\n    }\n  },\n};\n\nChart.defaults.color = chartJsColors.text;\nChart.defaults.borderColor = chartJsColors.border;\n\nChart.register(\n  TimeScale,\n  LinearScale,\n  BarElement,\n  Title,\n  PointElement,\n  LineElement,\n  Filler,\n  zoomPlugin,\n  customEventListener,\n);\n\nexport default {\n  components: {ChartLine, SvgIcon},\n  props: {\n    locale: {\n      type: Object,\n      required: true,\n    },\n  },\n  data: () => ({\n    isLoading: false,\n    errorText: '',\n    totalStats: {},\n    sortedContributors: {},\n    repoLink: pageData.repoLink || [],\n    type: pageData.contributionType,\n    contributorsStats: [],\n    xAxisStart: null,\n    xAxisEnd: null,\n    xAxisMin: null,\n    xAxisMax: null,\n  }),\n  mounted() {\n    this.fetchGraphData();\n\n    $('#repo-contributors').dropdown({\n      onChange: (val) => {\n        this.xAxisMin = this.xAxisStart;\n        this.xAxisMax = this.xAxisEnd;\n        this.type = val;\n        this.sortContributors();\n      },\n    });\n  },\n  methods: {\n    sortContributors() {\n      const contributors = this.filterContributorWeeksByDateRange();\n      const criteria = `total_${this.type}`;\n      this.sortedContributors = Object.values(contributors)\n        .filter((contributor) => contributor[criteria] !== 0)\n        .sort((a, b) => a[criteria] > b[criteria] ? -1 : a[criteria] === b[criteria] ? 0 : 1)\n        .slice(0, 100);\n    },\n\n    async fetchGraphData() {\n      this.isLoading = true;\n      try {\n        let response;\n        do {\n          response = await GET(`${this.repoLink}/activity/contributors/data`);\n          if (response.status === 202) {\n            await sleep(1000); // wait for 1 second before retrying\n          }\n        } while (response.status === 202);\n        if (response.ok) {\n          const data = await response.json();\n          const {total, ...rest} = data;\n          // below line might be deleted if we are sure go produces map always sorted by keys\n          total.weeks = Object.fromEntries(Object.entries(total.weeks).sort());\n\n          const weekValues = Object.values(total.weeks);\n          this.xAxisStart = weekValues[0].week;\n          this.xAxisEnd = firstStartDateAfterDate(new Date());\n          const startDays = startDaysBetween(new Date(this.xAxisStart), new Date(this.xAxisEnd));\n          total.weeks = fillEmptyStartDaysWithZeroes(startDays, total.weeks);\n          this.xAxisMin = this.xAxisStart;\n          this.xAxisMax = this.xAxisEnd;\n          this.contributorsStats = {};\n          for (const [email, user] of Object.entries(rest)) {\n            user.weeks = fillEmptyStartDaysWithZeroes(startDays, user.weeks);\n            this.contributorsStats[email] = user;\n          }\n          this.sortContributors();\n          this.totalStats = total;\n          this.errorText = '';\n        } else {\n          this.errorText = response.statusText;\n        }\n      } catch (err) {\n        this.errorText = err.message;\n      } finally {\n        this.isLoading = false;\n      }\n    },\n\n    filterContributorWeeksByDateRange() {\n      const filteredData = {};\n      const data = this.contributorsStats;\n      for (const key of Object.keys(data)) {\n        const user = data[key];\n        user.total_commits = 0;\n        user.total_additions = 0;\n        user.total_deletions = 0;\n        user.max_contribution_type = 0;\n        const filteredWeeks = user.weeks.filter((week) => {\n          const oneWeek = 7 * 24 * 60 * 60 * 1000;\n          if (week.week >= this.xAxisMin - oneWeek && week.week <= this.xAxisMax + oneWeek) {\n            user.total_commits += week.commits;\n            user.total_additions += week.additions;\n            user.total_deletions += week.deletions;\n            if (week[this.type] > user.max_contribution_type) {\n              user.max_contribution_type = week[this.type];\n            }\n            return true;\n          }\n          return false;\n        });\n        // this line is required. See https://github.com/sahinakkaya/gitea/pull/3#discussion_r1396495722\n        // for details.\n        user.max_contribution_type += 1;\n\n        filteredData[key] = {...user, weeks: filteredWeeks};\n      }\n\n      return filteredData;\n    },\n\n    maxMainGraph() {\n      // This method calculates maximum value for Y value of the main graph. If the number\n      // of maximum contributions for selected contribution type is 15.955 it is probably\n      // better to round it up to 20.000.This method is responsible for doing that.\n      // Normally, chartjs handles this automatically, but it will resize the graph when you\n      // zoom, pan etc. I think resizing the graph makes it harder to compare things visually.\n      const maxValue = Math.max(\n        ...this.totalStats.weeks.map((o) => o[this.type]),\n      );\n      const [coefficient, exp] = maxValue.toExponential().split('e').map(Number);\n      if (coefficient % 1 === 0) return maxValue;\n      return (1 - (coefficient % 1)) * 10 ** exp + maxValue;\n    },\n\n    maxContributorGraph() {\n      // Similar to maxMainGraph method this method calculates maximum value for Y value\n      // for contributors' graph. If I let chartjs do this for me, it will choose different\n      // maxY value for each contributors' graph which again makes it harder to compare.\n      const maxValue = Math.max(\n        ...this.sortedContributors.map((c) => c.max_contribution_type),\n      );\n      const [coefficient, exp] = maxValue.toExponential().split('e').map(Number);\n      if (coefficient % 1 === 0) return maxValue;\n      return (1 - (coefficient % 1)) * 10 ** exp + maxValue;\n    },\n\n    toGraphData(data) {\n      return {\n        datasets: [\n          {\n            data: data.map((i) => ({x: i.week, y: i[this.type]})),\n            pointRadius: 0,\n            pointHitRadius: 0,\n            fill: 'start',\n            backgroundColor: chartJsColors[this.type],\n            borderWidth: 0,\n            tension: 0.3,\n          },\n        ],\n      };\n    },\n\n    updateOtherCharts(event, reset) {\n      const minVal = event.chart.options.scales.x.min;\n      const maxVal = event.chart.options.scales.x.max;\n      if (reset) {\n        this.xAxisMin = this.xAxisStart;\n        this.xAxisMax = this.xAxisEnd;\n        this.sortContributors();\n      } else if (minVal) {\n        this.xAxisMin = minVal;\n        this.xAxisMax = maxVal;\n        this.sortContributors();\n      }\n    },\n\n    getOptions(type) {\n      return {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: false,\n        events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove', 'dblclick'],\n        plugins: {\n          title: {\n            display: type === 'main',\n            text: 'drag: zoom, shift+drag: pan, double click: reset zoom',\n            position: 'top',\n            align: 'center',\n          },\n          customEventListener: {\n            chartType: type,\n            instance: this,\n          },\n          zoom: {\n            pan: {\n              enabled: true,\n              modifierKey: 'shift',\n              mode: 'x',\n              threshold: 20,\n              onPanComplete: this.updateOtherCharts,\n            },\n            limits: {\n              x: {\n                // Check https://www.chartjs.org/chartjs-plugin-zoom/latest/guide/options.html#scale-limits\n                // to know what each option means\n                min: 'original',\n                max: 'original',\n\n                // number of milliseconds in 2 weeks. Minimum x range will be 2 weeks when you zoom on the graph\n                minRange: 2 * 7 * 24 * 60 * 60 * 1000,\n              },\n            },\n            zoom: {\n              drag: {\n                enabled: type === 'main',\n              },\n              pinch: {\n                enabled: type === 'main',\n              },\n              mode: 'x',\n              onZoomComplete: this.updateOtherCharts,\n            },\n          },\n        },\n        scales: {\n          x: {\n            min: this.xAxisMin,\n            max: this.xAxisMax,\n            type: 'time',\n            grid: {\n              display: false,\n            },\n            time: {\n              minUnit: 'month',\n            },\n            ticks: {\n              maxRotation: 0,\n              maxTicksLimit: type === 'main' ? 12 : 6,\n            },\n          },\n          y: {\n            min: 0,\n            max: type === 'main' ? this.maxMainGraph() : this.maxContributorGraph(),\n            ticks: {\n              maxTicksLimit: type === 'main' ? 6 : 4,\n            },\n          },\n        },\n      };\n    },\n  },\n};\n</script>\n<template>\n  <div>\n    <div class=\"ui header tw-flex tw-items-center tw-justify-between\">\n      <div>\n        <relative-time\n          v-if=\"xAxisMin > 0\"\n          format=\"datetime\"\n          year=\"numeric\"\n          month=\"short\"\n          day=\"numeric\"\n          weekday=\"\"\n          :datetime=\"new Date(xAxisMin)\"\n        >\n          {{ new Date(xAxisMin) }}\n        </relative-time>\n        {{ isLoading ? locale.loadingTitle : errorText ? locale.loadingTitleFailed: \"-\" }}\n        <relative-time\n          v-if=\"xAxisMax > 0\"\n          format=\"datetime\"\n          year=\"numeric\"\n          month=\"short\"\n          day=\"numeric\"\n          weekday=\"\"\n          :datetime=\"new Date(xAxisMax)\"\n        >\n          {{ new Date(xAxisMax) }}\n        </relative-time>\n      </div>\n      <div>\n        <!-- Contribution type -->\n        <div class=\"ui dropdown jump\" id=\"repo-contributors\">\n          <div class=\"ui basic compact button\">\n            <span class=\"text\">\n              <span class=\"not-mobile\">{{ locale.filterLabel }}&nbsp;</span><strong>{{ locale.contributionType[type] }}</strong>\n              <svg-icon name=\"octicon-triangle-down\" :size=\"14\"/>\n            </span>\n          </div>\n          <div class=\"menu\">\n            <div :class=\"['item', {'active': type === 'commits'}]\">\n              {{ locale.contributionType.commits }}\n            </div>\n            <div :class=\"['item', {'active': type === 'additions'}]\">\n              {{ locale.contributionType.additions }}\n            </div>\n            <div :class=\"['item', {'active': type === 'deletions'}]\">\n              {{ locale.contributionType.deletions }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"tw-flex ui segment main-graph\">\n      <div v-if=\"isLoading || errorText !== ''\" class=\"gt-tc tw-m-auto\">\n        <div v-if=\"isLoading\">\n          <SvgIcon name=\"octicon-sync\" class=\"tw-mr-2 job-status-rotate\"/>\n          {{ locale.loadingInfo }}\n        </div>\n        <div v-else class=\"text red\">\n          <SvgIcon name=\"octicon-x-circle-fill\"/>\n          {{ errorText }}\n        </div>\n      </div>\n      <ChartLine\n        v-memo=\"[totalStats.weeks, type]\" v-if=\"Object.keys(totalStats).length !== 0\"\n        :data=\"toGraphData(totalStats.weeks)\" :options=\"getOptions('main')\"\n      />\n    </div>\n    <div class=\"contributor-grid\">\n      <div\n        v-for=\"(contributor, index) in sortedContributors\"\n        :key=\"index\"\n        v-memo=\"[sortedContributors, type]\"\n      >\n        <div class=\"ui top attached header tw-flex tw-flex-1\">\n          <b class=\"ui right\">#{{ index + 1 }}</b>\n          <a :href=\"contributor.home_link\">\n            <img class=\"ui avatar tw-align-middle\" height=\"40\" width=\"40\" :src=\"contributor.avatar_link\">\n          </a>\n          <div class=\"tw-ml-2\">\n            <a v-if=\"contributor.home_link !== ''\" :href=\"contributor.home_link\"><h4>{{ contributor.name }}</h4></a>\n            <h4 v-else class=\"contributor-name\">\n              {{ contributor.name }}\n            </h4>\n            <p class=\"tw-text-12 tw-flex tw-gap-1\">\n              <strong v-if=\"contributor.total_commits\">{{ contributor.total_commits.toLocaleString() }} {{ locale.contributionType.commits }}</strong>\n              <strong v-if=\"contributor.total_additions\" class=\"text green\">{{ contributor.total_additions.toLocaleString() }}++ </strong>\n              <strong v-if=\"contributor.total_deletions\" class=\"text red\">\n                {{ contributor.total_deletions.toLocaleString() }}--</strong>\n            </p>\n          </div>\n        </div>\n        <div class=\"ui attached segment\">\n          <div>\n            <ChartLine\n              :data=\"toGraphData(contributor.weeks)\"\n              :options=\"getOptions('contributor')\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<style scoped>\n.main-graph {\n  height: 260px;\n  padding-top: 2px;\n}\n\n.contributor-grid {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 1rem;\n}\n\n.contributor-grid > * {\n  min-width: 0;\n}\n\n@media (max-width: 991.98px) {\n  .contributor-grid {\n    grid-template-columns: repeat(1, 1fr);\n  }\n}\n\n.contributor-name {\n  margin-bottom: 0;\n}\n</style>\n"],"names":[],"sourceRoot":""}