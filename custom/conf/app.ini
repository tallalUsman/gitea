APP_NAME = Maester: Smart. Swift. Scholarly.
RUN_USER = tallalusman
WORK_PATH = /Users/tallalusman/Documents/Github/gitea/gitea
RUN_MODE = prod

[database]
DB_TYPE = sqlite3
HOST = 127.0.0.1:3306
NAME = gitea
USER = gitea
PASSWD = Farooq123*
SCHEMA = 
SSL_MODE = disable
PATH = /Users/tallalusman/Documents/Github/gitea/gitea/data/gitea.db
LOG_SQL = false

[repository]
ROOT = /Users/tallalusman/Documents/Github/gitea/gitea/data/gitea-repositories

[server]
SSH_DOMAIN = localhost
DOMAIN = localhost
HTTP_PORT = 3000
ROOT_URL = http://localhost:3000/
APP_DATA_PATH = /Users/tallalusman/Documents/Github/gitea/gitea/data
DISABLE_SSH = false
SSH_PORT = 22
LFS_START_SERVER = true
LFS_JWT_SECRET = o-tB-Xdlu-C87uMaO0AlTDLUaAfZPzys3JPYS_03jpY
OFFLINE_MODE = true

[lfs]
PATH = /Users/tallalusman/Documents/Github/gitea/gitea/data/lfs

[mailer]
ENABLED = false

[service]
REGISTER_EMAIL_CONFIRM = false
ENABLE_NOTIFY_MAIL = false
DISABLE_REGISTRATION = false
ALLOW_ONLY_EXTERNAL_REGISTRATION = false
ENABLE_CAPTCHA = false
REQUIRE_SIGNIN_VIEW = false
DEFAULT_KEEP_EMAIL_PRIVATE = false
DEFAULT_ALLOW_CREATE_ORGANIZATION = true
DEFAULT_ENABLE_TIMETRACKING = true
NO_REPLY_ADDRESS = noreply.localhost

[openid]
ENABLE_OPENID_SIGNIN = true
ENABLE_OPENID_SIGNUP = true

[cron.update_checker]
ENABLED = false

[session]
PROVIDER = file

[log]
MODE = console
LEVEL = info
ROOT_PATH = /Users/tallalusman/Documents/Github/gitea/gitea/log

[repository.pull-request]
DEFAULT_MERGE_STYLE = merge

[repository.signing]
DEFAULT_TRUST_MODEL = committer

[security]
INSTALL_LOCK = true
INTERNAL_TOKEN = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE3MTQ4MTUwMjF9.geSshP_RC3RBcyH1Fj_fzmAZ5lMN__SEPVthp4rQr6w
PASSWORD_HASH_ALGO = pbkdf2

[oauth2]
JWT_SECRET = NuXOn7szjrHPQZs9Lqk7F5jxr8Eg4Bdi5XSUpXtjCdE

[git.config]
core.quotePath = false
core.attributesfile = /Users/tallalusman/Documents/Github/gitea/gitea/.gitattributes
diff.pandoc.textconv=pandoc --to=markdown
diff.pandoc.prompt = false

[markup.docx]
ENABLED = true
FILE_EXTENSIONS = .docx
RENDER_COMMAND = "pandoc --from docx --to=html5 --standalone"
#RENDER_COMMAND = "pandoc --from=docx --to=html5 --standalone"


[markup.sanitizer.docx.img]
ALLOW_DATA_URI_IMAGES = true

[markup.sanitizer.TeX]
; Pandoc renders TeX segments as <span>s with the "math" class, optionally
; with "inline" or "display" classes depending on context.
; - note this is different from the built-in math support in our markdown parser which uses <code>
ELEMENT = span
ALLOW_ATTR = class
REGEXP = ^\s*((math(\s+|$)|inline(\s+|$)|display(\s+|$)))+

[markup.markdown]
ENABLED         = true
FILE_EXTENSIONS = .md,.markdown
RENDER_COMMAND  = pandoc -f markdown -t html --katex

[markup.markdown]
ENABLED = true
FILE_EXTENSIONS = .md,.markdown
RENDER_COMMAND = pandoc -f markdown -t html --katex


[markup.asciidoc]
ENABLED = true
FILE_EXTENSIONS = .adoc,.asciidoc
RENDER_COMMAND = "asciidoctor -s -a showtitle --out-file=- -"
; Input is not a standard input but a file
IS_INPUT_FILE = false

[markup.jupyter]
ENABLED = true
FILE_EXTENSIONS = .ipynb
RENDER_COMMAND = "jupyter nbconvert --stdin --stdout --to html --template basic"
IS_INPUT_FILE = false

[markup.restructuredtext]
ENABLED = true
FILE_EXTENSIONS = .rst
RENDER_COMMAND = "timeout 30s pandoc +RTS -M512M -RTS -f rst"
IS_INPUT_FILE = false